{
  "version": 3,
  "sources": ["../../../../../node_modules/spin-delay/src/index.ts"],
  "sourcesContent": ["import { useState, useEffect, useRef } from 'react';\n\ninterface SpinDelayOptions {\n  delay?: number;\n  minDuration?: number;\n}\n\ntype State = 'IDLE' | 'DELAY' | 'DISPLAY' | 'EXPIRE';\n\nexport const defaultOptions = {\n  delay: 500,\n  minDuration: 200,\n};\n\nexport function useSpinDelay(\n  loading: boolean,\n  options?: SpinDelayOptions,\n): boolean {\n  options = Object.assign({}, defaultOptions, options);\n\n  const [state, setState] = useState<State>('IDLE');\n  const timeout = useRef(null);\n\n  useEffect(() => {\n    if (loading && state === 'IDLE') {\n      clearTimeout(timeout.current);\n\n      timeout.current = setTimeout(() => {\n        if (!loading) {\n          return setState('IDLE');\n        }\n\n        timeout.current = setTimeout(() => {\n          setState('EXPIRE');\n        }, options.minDuration);\n\n        setState('DISPLAY');\n      }, options.delay);\n\n      setState('DELAY');\n    }\n\n    if (!loading && state !== 'DISPLAY') {\n      clearTimeout(timeout.current);\n      setState('IDLE');\n    }\n  }, [loading, state, options.delay, options.minDuration]);\n\n  useEffect(() => {\n    return () => clearTimeout(timeout.current);\n  }, []);\n\n  return state === 'DISPLAY' || state === 'EXPIRE';\n}\n\nexport default useSpinDelay;\n"],
  "mappings": ";;;;;;;;;;;;;YASa,iBAAiB;QAC5B,OAAO;QACP,aAAa;;4BAIb,SACA,SAAA;AAEA,kBAAU,OAAO,OAAO,IAAI,gBAAgB;AAE5C,cAAM,CAAC,OAAO,YAAY,MAAA,SAAgB;AAC1C,cAAM,UAAU,MAAA,OAAO;AAEvB,cAAA,UAAU,MAAA;AACR,cAAI,WAAW,UAAU,QAAQ;AAC/B,yBAAa,QAAQ;AAErB,oBAAQ,UAAU,WAAW,MAAA;AAC3B,kBAAI,CAAC,SAAS;AACZ,uBAAO,SAAS;;AAGlB,sBAAQ,UAAU,WAAW,MAAA;AAC3B,yBAAS;iBACR,QAAQ;AAEX,uBAAS;eACR,QAAQ;AAEX,qBAAS;;AAGX,cAAI,CAAC,WAAW,UAAU,WAAW;AACnC,yBAAa,QAAQ;AACrB,qBAAS;;WAEV,CAAC,SAAS,OAAO,QAAQ,OAAO,QAAQ;AAE3C,cAAA,UAAU,MAAA;AACR,iBAAO,MAAM,aAAa,QAAQ;WACjC;AAEH,eAAO,UAAU,aAAa,UAAU;;;;;;;;",
  "names": []
}
