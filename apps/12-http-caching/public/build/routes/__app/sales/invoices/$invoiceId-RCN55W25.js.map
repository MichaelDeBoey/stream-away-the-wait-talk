{
  "version": 3,
  "sources": ["browser-route-module:/Users/kentcdodds/Desktop/stream-away-the-wait-talk/apps/12-http-caching/app/routes/__app/sales/invoices/$invoiceId.tsx?browser", "../../../../../../app/routes/__app/sales/invoices/$invoiceId.tsx"],
  "sourcesContent": ["export { CatchBoundary, ErrorBoundary, default } from \"/Users/kentcdodds/Desktop/stream-away-the-wait-talk/apps/12-http-caching/app/routes/__app/sales/invoices/$invoiceId.tsx\";", "import type { LoaderFunction, ActionFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport {\n  Link,\n  useCatch,\n  useFetcher,\n  useLoaderData,\n  useLocation,\n  useParams,\n} from \"@remix-run/react\";\nimport {\n  ErrorFallback,\n  inputClasses,\n  LabelText,\n  submitButtonClasses,\n} from \"~/components\";\nimport { getInvoiceDetails } from \"~/models/invoice.server\";\nimport type { LineItem, DueStatus } from \"~/models/invoice.server\";\nimport { requireUser } from \"~/session.server\";\nimport { currencyFormatter, parseDate } from \"~/utils\";\nimport type { Deposit } from \"~/models/deposit.server\";\nimport { createDeposit } from \"~/models/deposit.server\";\nimport invariant from \"tiny-invariant\";\nimport { useEffect, useRef } from \"react\";\n\ntype LoaderData = {\n  customerName: string;\n  customerId: string;\n  totalAmount: number;\n  dueStatus: DueStatus;\n  dueDisplay: string;\n  invoiceDateDisplay: string;\n  lineItems: Array<\n    Pick<LineItem, \"id\" | \"quantity\" | \"unitPrice\" | \"description\">\n  >;\n  deposits: Array<\n    Pick<Deposit, \"id\" | \"amount\"> & { depositDateFormatted: string }\n  >;\n};\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  await requireUser(request);\n  const { invoiceId } = params;\n  if (typeof invoiceId !== \"string\") {\n    throw new Error(\"This should be unpossible.\");\n  }\n  const invoiceDetails = await getInvoiceDetails(invoiceId);\n  if (!invoiceDetails) {\n    throw new Response(\"not found\", { status: 404 });\n  }\n  return json<LoaderData>({\n    customerName: invoiceDetails.invoice.customer.name,\n    customerId: invoiceDetails.invoice.customer.id,\n    totalAmount: invoiceDetails.totalAmount,\n    dueStatus: invoiceDetails.dueStatus,\n    dueDisplay: invoiceDetails.dueStatusDisplay,\n    invoiceDateDisplay: invoiceDetails.invoice.invoiceDate.toLocaleDateString(),\n    lineItems: invoiceDetails.invoice.lineItems.map((li) => ({\n      id: li.id,\n      description: li.description,\n      quantity: li.quantity,\n      unitPrice: li.unitPrice,\n    })),\n    deposits: invoiceDetails.invoice.deposits.map((deposit) => ({\n      id: deposit.id,\n      amount: deposit.amount,\n      depositDateFormatted: deposit.depositDate.toLocaleDateString(),\n    })),\n  });\n};\n\ntype ActionData = {\n  errors: {\n    amount: string | null;\n    depositDate: string | null;\n  };\n};\n\nfunction validateAmount(amount: number) {\n  if (amount <= 0) return \"Must be greater than 0\";\n  if (Number(amount.toFixed(2)) !== amount) {\n    return \"Must only have two decimal places\";\n  }\n  return null;\n}\n\nfunction validateDepositDate(date: Date) {\n  if (Number.isNaN(date.getTime())) {\n    return \"Please enter a valid date\";\n  }\n  return null;\n}\n\nexport const action: ActionFunction = async ({ request, params }) => {\n  await requireUser(request);\n  const { invoiceId } = params;\n  if (typeof invoiceId !== \"string\") {\n    throw new Error(\"This should be unpossible.\");\n  }\n  const formData = await request.formData();\n  const intent = formData.get(\"intent\");\n  invariant(typeof intent === \"string\", \"intent required\");\n  switch (intent) {\n    case \"create-deposit\": {\n      const amount = Number(formData.get(\"amount\"));\n      const depositDateString = formData.get(\"depositDate\");\n      const note = formData.get(\"note\");\n      invariant(!Number.isNaN(amount), \"amount must be a number\");\n      invariant(typeof depositDateString === \"string\", \"dueDate is required\");\n      invariant(typeof note === \"string\", \"dueDate is required\");\n      const depositDate = parseDate(depositDateString);\n\n      const errors: ActionData[\"errors\"] = {\n        amount: validateAmount(amount),\n        depositDate: validateDepositDate(depositDate),\n      };\n      const hasErrors = Object.values(errors).some(\n        (errorMessage) => errorMessage\n      );\n      if (hasErrors) {\n        return json<ActionData>({ errors });\n      }\n\n      await createDeposit({ invoiceId, amount, note, depositDate });\n      return new Response(\"ok\");\n    }\n    default: {\n      throw new Error(`Unsupported intent: ${intent}`);\n    }\n  }\n};\n\nconst lineItemClassName =\n  \"flex justify-between border-t border-gray-100 py-4 text-[14px] leading-[24px]\";\nexport default function InvoiceRoute() {\n  const data = useLoaderData() as LoaderData;\n  const location = useLocation();\n  return (\n    <div className=\"relative p-10\" key={location.key}>\n      <Link\n        to={`../../customers/${data.customerId}`}\n        className=\"text-[length:14px] font-bold leading-6 text-blue-600 underline\"\n      >\n        {data.customerName}\n      </Link>\n      <div className=\"text-[length:32px] font-bold leading-[40px]\">\n        {currencyFormatter.format(data.totalAmount)}\n      </div>\n      <LabelText>\n        <span\n          className={\n            data.dueStatus === \"paid\"\n              ? \"text-green-brand\"\n              : data.dueStatus === \"overdue\"\n              ? \"text-red-brand\"\n              : \"\"\n          }\n        >\n          {data.dueDisplay}\n        </span>\n        {` \u2022 Invoiced ${data.invoiceDateDisplay}`}\n      </LabelText>\n      <div className=\"h-4\" />\n      {data.lineItems.map((item) => (\n        <LineItemDisplay\n          key={item.id}\n          description={item.description}\n          unitPrice={item.unitPrice}\n          quantity={item.quantity}\n        />\n      ))}\n      <div className={`${lineItemClassName} font-bold`}>\n        <div>Net Total</div>\n        <div>{currencyFormatter.format(data.totalAmount)}</div>\n      </div>\n      <div className=\"h-8\" />\n      <Deposits />\n    </div>\n  );\n}\n\ninterface DepositFormControlsCollection extends HTMLFormControlsCollection {\n  amount?: HTMLInputElement;\n  depositDate?: HTMLInputElement;\n  note?: HTMLInputElement;\n  intent?: HTMLButtonElement;\n}\ninterface DepositFormElement extends HTMLFormElement {\n  readonly elements: DepositFormControlsCollection;\n}\n\nfunction Deposits() {\n  const data = useLoaderData() as LoaderData;\n  const newDepositFetcher = useFetcher();\n  const formRef = useRef<HTMLFormElement>(null);\n\n  const deposits = [...data.deposits];\n\n  if (newDepositFetcher.submission) {\n    const amount = Number(newDepositFetcher.submission.formData.get(\"amount\"));\n    const depositDateVal =\n      newDepositFetcher.submission.formData.get(\"depositDate\");\n    const depositDate =\n      typeof depositDateVal === \"string\" ? parseDate(depositDateVal) : null;\n    if (\n      !validateAmount(amount) &&\n      depositDate &&\n      !validateDepositDate(depositDate)\n    ) {\n      deposits.push({\n        id: \"new\",\n        amount,\n        depositDateFormatted: depositDate.toLocaleDateString(),\n      });\n    }\n  }\n\n  const errors = newDepositFetcher.data?.errors as\n    | ActionData[\"errors\"]\n    | undefined;\n\n  useEffect(() => {\n    if (!formRef.current) return;\n    if (newDepositFetcher.type !== \"done\") return;\n\n    const formEl = formRef.current as DepositFormElement;\n\n    if (errors?.amount) {\n      formEl.elements.amount?.focus();\n    } else if (errors?.depositDate) {\n      formEl.elements.depositDate?.focus();\n    } else if (document.activeElement === formEl.elements.intent) {\n      formEl.reset();\n      formEl.elements.amount?.focus();\n    }\n  }, [newDepositFetcher.type, errors]);\n\n  return (\n    <div>\n      <div className=\"font-bold leading-8\">Deposits</div>\n      {deposits.length > 0 ? (\n        deposits.map((deposit) => (\n          <div key={deposit.id} className={lineItemClassName}>\n            <Link\n              to={`../../deposits/${deposit.id}`}\n              className=\"text-blue-600 underline\"\n            >\n              {deposit.depositDateFormatted}\n            </Link>\n            <div>{currencyFormatter.format(deposit.amount)}</div>\n          </div>\n        ))\n      ) : (\n        <div>None yet</div>\n      )}\n      <newDepositFetcher.Form\n        method=\"post\"\n        className=\"grid grid-cols-1 gap-x-4 gap-y-2 lg:grid-cols-2\"\n        ref={formRef}\n        noValidate\n      >\n        <div className=\"min-w-[100px]\">\n          <div className=\"flex flex-wrap items-center gap-1\">\n            <LabelText>\n              <label htmlFor=\"depositAmount\">Amount</label>\n            </LabelText>\n            {errors?.amount ? (\n              <em id=\"amount-error\" className=\"text-d-p-xs text-red-600\">\n                {errors.amount}\n              </em>\n            ) : null}\n          </div>\n          <input\n            id=\"depositAmount\"\n            name=\"amount\"\n            type=\"number\"\n            className={inputClasses}\n            min=\"0.01\"\n            step=\"any\"\n            required\n            aria-invalid={Boolean(errors?.amount) || undefined}\n            aria-errormessage={errors?.amount ? \"amount-error\" : undefined}\n          />\n        </div>\n        <div>\n          <div className=\"flex flex-wrap items-center gap-1\">\n            <LabelText>\n              <label htmlFor=\"depositDate\">Date</label>\n            </LabelText>\n            {errors?.depositDate ? (\n              <em id=\"depositDate-error\" className=\"text-d-p-xs text-red-600\">\n                {errors.depositDate}\n              </em>\n            ) : null}\n          </div>\n          <input\n            id=\"depositDate\"\n            name=\"depositDate\"\n            type=\"date\"\n            className={`${inputClasses} h-[34px]`}\n            required\n            aria-invalid={Boolean(errors?.depositDate) || undefined}\n            aria-errormessage={\n              errors?.depositDate ? \"depositDate-error\" : undefined\n            }\n          />\n        </div>\n        <div className=\"grid grid-cols-1 gap-4 lg:col-span-2 lg:flex\">\n          <div className=\"flex-1\">\n            <LabelText>\n              <label htmlFor=\"depositNote\">Note</label>\n            </LabelText>\n            <input\n              id=\"depositNote\"\n              name=\"note\"\n              type=\"text\"\n              className={inputClasses}\n            />\n          </div>\n          <div className=\"flex items-end\">\n            <button\n              type=\"submit\"\n              className={submitButtonClasses}\n              name=\"intent\"\n              value=\"create-deposit\"\n            >\n              Create\n            </button>\n          </div>\n        </div>\n      </newDepositFetcher.Form>\n    </div>\n  );\n}\n\nfunction LineItemDisplay({\n  description,\n  quantity,\n  unitPrice,\n}: {\n  description: string;\n  quantity: number;\n  unitPrice: number;\n}) {\n  return (\n    <div className={lineItemClassName}>\n      <div>{description}</div>\n      {quantity === 1 ? null : <div className=\"text-[10px]\">({quantity}x)</div>}\n      <div>{currencyFormatter.format(unitPrice)}</div>\n    </div>\n  );\n}\n\nexport function CatchBoundary() {\n  const caught = useCatch();\n  const params = useParams();\n\n  if (caught.status === 404) {\n    return (\n      <div className=\"p-12 text-red-500\">\n        No invoice found with the ID of \"{params.invoiceId}\"\n      </div>\n    );\n  }\n\n  throw new Error(`Unexpected caught response with status: ${caught.status}`);\n}\n\nexport function ErrorBoundary({ error }: { error: Error }) {\n  console.error(error);\n\n  return <ErrorFallback />;\n}\n"],
  "mappings": "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",
  "names": []
}
